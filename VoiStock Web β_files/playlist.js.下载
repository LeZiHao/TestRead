$(function() {
	
	$(document).on('click',".playlist",function(){
		if (uid.length===0) {
			$("#loginModal").modal('show');
			return false;
		}
		console.log('click playlist');
		
		var t = $(this);
		if( t.parent().hasClass('open')) {
//			t.attr("aria-expanded","false");
			var vid = $(this).data("vid");
			console.log(vid);
			var translang = $.cookie('translate-status');
			var postdata  = {"vid":vid , "translang":translang};
			console.log(postdata);
			var lang = $.cookie('lang');
			if ( typeof lang==="undefined" ) {
				lang ="ja";
			}
			var apiurl    = "/"+lang+"/playlist/getlist.php";
			
			$.ajax({
				type: "POST",
				url:  apiurl,
				data: postdata,
				dataType: "html",
				success: function(data) {
//					$(this).next('.dropdown-menu').slideToggle(150);
					console.log(data);
					t.parent().find('.playlist-data').html(data);
//					t.attr("aria-expanded","true");
					unsetPlaylistCheck();
					setPlaylistCheck();
				},
				error: function(err) {
				  console.log(JSON.stringify(err));
				}
			});
		}
	});
	
	$(document).on('hide.bs.modal',"#addPlaylistModal",function(){
		console.log($('#playlist-vid').val());
		var this_vid = $('#playlist-vid').val();
		
		var listItem=$('.playlist');
		var v = listItem.filter( function(){
			return ($(this).data('vid')=== this_vid);
		})
		
		
		console.log(v.nextAll('.playlist-data'));
		v.nextAll('.playlist-data').removeAttr('style');
	});
	
/*	
	$('.playlist').click(function () {
		$(this).next('.dropdown-menu').slideToggle(150);
	});
*/	
	$(document).on('click','.newPlayList',function(){
		$(this).parents('.dropdown-menu').slideToggle(150);
		$('#addPlaylistModal').modal('show');
		var vid = $(this).data('vid');
		$('#playlist-vid').val(vid);
		
	});

/*	
	$('#addPlaylistModal').on('show.bs.modal',function(){
		initPlaylistAddModal();
	});
*/	
	
	
	playListDrawImageFromUrl($('#playlist-cvs').data('src'));
	
	$('#playlistImageUp').hide();
	$(document).on('click','#playlist-image-upload',function(){
		$('#playlistImageUp').click();
	});
	
	
	$(document).on('change','#playlistImageUp',function(){
		
		if (!this.files.length) {
			console.log('ファイルが選択されていません');
			return;
		}		
		var t = this;
		playListDrawImageFromLocal(t);
	});
	

	$(document).on('click','.add-playlist',function(){
		playListSendDataToApi();
	});
	
/*	
	$(document).on('click',function(e) {
		console.log(e.target);
		if(!$(e.target).closest('.playlist-data').length) {
			$('.playlist-data').each(function(){
				if ($(this).css('display') === 'block') {
					$(this).slideToggle(150);
				}
			});
		}
	});
*/	
});



function unsetPlaylistCheck() {
	$(document).off('change','.playlistcheck');
}

function setPlaylistCheck() {
	$(document).on('change','.playlistcheck', function(){
		var v = $(this).val();
		var check = false;
		if ($(this).prop('checked')) {
			check =true; 
		}
		console.log(v);
		console.log(check);
		
		var voiceId = $(this).data('vid');
		
		var skey = createSkey();
		var scode= createScode(skey);
		var userId = $(this).data('uid');
		var postdata  = {"userId":userId ,"playlistId":v ,"voiceId":voiceId, "skey":skey,"scode":scode};
		if (check === true) {
			var apiurl    = apidom + '/playlist/addVoiceToPlaylist.php';
			// 登録する
			$.ajax({
				type: "POST",
				url:  apiurl,
				data: postdata,
				dataType: "json",
				success: function(data) {
					console.log(data);
					dispAddTips();
				},
				error: function(err) {
				  console.log(JSON.stringify(err));
				}
			});

		} else {
			var apiurl    = apidom + '/playlist/delVoiceFromPlaylist.php';
			// 削除する
			$.ajax({
				type: "POST",
				url:  apiurl,
				data: postdata,
				dataType: "json",
				success: function(data) {
					console.log(data);
					dispDelTips();
				},
				error: function(err) {
				  console.log(JSON.stringify(err));
				}
			});
			
		}
	});
	
}

function playListDrawImageFromUrl(f) {
	var canvas = $("#playlist-cvs");
	var ctx = canvas[0].getContext('2d');	
	var image = new Image();
	var file = f;
	
		// 画像がロードされた後にcanvasに描画を行う [非同期処理]
	image.onload = function() {
			// プレビュー(Cnavas)のサイズを指定
		var cnvsW = 150;
		var cnvsH = image.naturalHeight/image.naturalWidth*cnvsW;
			// Cnavasにサイズアトリビュートを設定する
		canvas.attr('width', cnvsW);
		canvas.attr('height', cnvsH);
			// 描画
		ctx.drawImage(image, 0, 0, cnvsW, cnvsH);
	}
	// 読み込んだ画像をimageのソースに設定
	 image.src = file;
}
	
function playListDrawImageFromLocal(t) {
	// Formからファイルを取得
	var file = t.files[0];
	 // HTMLのCanvas要素の取得
	var canvas = $("#playlist-cvs");
	// getContext()メソッドで描画機能を有効にする
	var ctx = canvas[0].getContext('2d');
	// 描画イメージインスタンス化
	var image = new Image();
	// File API FileReader Objectでローカルファイルにアクセス
	var fr = new FileReader();
	// ファイル読み込み読み込み完了後に実行 [非同期処理]
	fr.onload = function(evt) {
		// 画像がロードされた後にcanvasに描画を行う [非同期処理]
		image.onload = function() {
		// プレビュー(Cnavas)のサイズを指定
		var cnvsW = 150;
		var cnvsH = image.naturalHeight/image.naturalWidth*cnvsW;
			// Cnavasにサイズアトリビュートを設定する
			canvas.attr('width', cnvsW);
			canvas.attr('height', cnvsH);
			// 描画
			ctx.drawImage(image, 0, 0, cnvsW, cnvsH);
			$('.imageUpFlag').attr('value','yes');
	  }
	  // 読み込んだ画像をimageのソースに設定
	  image.src = evt.target.result;
	}

	// fileを読み込む データはBase64エンコードされる
	fr.readAsDataURL(file);

}


function playListSendDataToApi() {
	var playlistName = $('.add-playlistname').val();
	
	if (playlistName.length===0) {
		palylistAddError();
		return false;
	} else {
		palylistDelError();
	}
	
	var feed = $('.playlist-feedFlag').prop('checked');
	var feedFlag = (feed===true)? 'yes' : 'no';
	
	
	var playlistTags = $('#playListTags').val();
//	var playlistTags = tags.split(",");
		
	var b64 = $("#playlist-cvs")[0].toDataURL('image/png');
	var playlistPhoto = b64.replace(/^.*,/, '');
	

	var userId = $('#playlist-uid').val();
	var voiceId = $('#playlist-vid').val();
	
	var skey = createSkey();
	var scode= createScode(skey);
	
	
//		console.log(voistockId);
	
	var postdata  = {"userId":userId ,"playlistName":playlistName ,"playlistPhoto":playlistPhoto, "playlistTags[]":playlistTags ,"feedFlag":feedFlag ,"voiceId":voiceId ,"state":'add' , "skey":skey,"scode":scode};
	
	console.log(postdata);

	var apiurl    = apidom + '/playlist/playlistRegist.php';


	$.ajax({
		type: "POST",
		url:  apiurl,
		data: postdata,
		dataType: "json",
		success: function(data) {
			console.log(data);
			$('#addPlaylistModal').modal('hide');
		},
		error: function(err) {
		  console.log(JSON.stringify(err));
		}
	});


}


function palylistAddError() {
	$('.add-playlistname').css("border","2px solid #CE5454");
	if( !$('.add-playlistname').next().hasClass("font-warning")) {
		$('.add-playlistname').after('<p class="font-warning">必須項目です</p>');
	}
}

function palylistDelError() {
	$('.add-playlistname').css("border","1px solid #ccc");
	if( $('.add-playlistname').next().hasClass("font-warning")) {
		$('.add-playlistname').next().remove();
	}
}


function dispAddTips() {
	var n = new PNotify({
		title: '追加しました',
		text: 'ボイスをプレイリストに追加しました',
		type: 'success',
		styling: 'bootstrap3',
		delay: 1200
	});
}

function dispDelTips() {
	var n = new PNotify({
		title: '削除しました',
		text: 'ボイスをプレイリストから削除しました',
		type: 'warning',
		styling: 'bootstrap3',
		delay: 1200
	});
}
